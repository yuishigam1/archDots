local ls = require("luasnip")
local s = ls.snippet
local t = ls.text_node

ls.add_snippets("cpp", {
  s("cp", {
    t({
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "typedef long long ll;",
      "typedef long l;",
      "typedef unsigned long long ull;",
      "typedef unsigned long ul;",
      "typedef double dl;",
      "typedef string str;",
      "typedef long double ldl;",
      "#define vi vector<int>",
      "#define vl vector<l>",
      "#define vll vector<ll>",
      "#define vs vector<string>",
      "#define vc vector<char>",
      "#define vd vector<double>",
      "#define mpll map<ll, ll>",
      "#define mpdd map<double, double>",
      "#define mpss map<string, string>",
      "#define mpls map<ll, string>",
      "const double PI = 3.14;",
      "const ll Mod = 1e9+7;",
      '#define debug(x) cout << #x << ": " << x << endl',
      "",
      "void fastIO() {",
      "  ios_base::sync_with_stdio(0);",
      "  cin.tie(0);",
      "}",
      "",
      "ll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }",
      "ll lcm(ll a, ll b) { return (a / gcd(a, b)) * b; }",
      "ll power(ll base, ll exp, ll mod) {",
      "  ll result = 1;",
      "  while (exp) {",
      "    if (exp % 2)",
      "      result = (result * base) % mod;",
      "    base = (base * base) % mod;",
      "    exp /= 2;",
      "  }",
      "  return result;",
      "}",
      "",
      "template <typename T> void printVector(const vector<T> &v) {",
      "  for (const auto &elem : v)",
      '    cout << elem << " ";',
      "  cout << endl;",
      "}",
      "template <typename K, typename V> void printMap(const map<K, V> &m) {",
      "  for (const auto &pair : m)",
      '    cout << "{" << pair.first << ": " << pair.second << "} ";',
      "  cout << endl;",
      "}",
      "template <typename T> void uniqueElements(vector<T> &v) {",
      "  sort(v.begin(), v.end());",
      "  v.erase(unique(v.begin(), v.end()), v.end());",
      "}",
      "",
      "using Matrix = vector<vector<ll>>;",
      "Matrix multiply(const Matrix &A, const Matrix &B) {",
      "  int n = A.size(), m = B[0].size(), p = B.size();",
      "  Matrix C(n, vector<ll>(m, 0));",
      "  for (int i = 0; i < n; i++)",
      "    for (int j = 0; j < m; j++)",
      "      for (int k = 0; k < p; k++)",
      "        C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % Mod;",
      "  return C;",
      "}",
      "",
      "template <typename T> T random(T low, T high) {",
      "  return low + rand() % (high - low + 1);",
      "}",
      "",
      "template <typename T> T countr_zero(T x) {",
      "  return __builtin_ctz(x);",
      "}",
      "",
      "void solve() {",
      "  ll n, temp;",
      "  cin >> n;",
      "}",
      "",
      "int main() {",
      "  fastIO();",
      "  l T = 1;",
      "  cin >> T;",
      "  while (T--) {",
      "    solve();",
      "  }",
      "  return 0;",
      "}",
    }),
  }),
})